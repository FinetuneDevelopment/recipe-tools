.type-heading     { font-family: $font-heading     !important; }
.type-etc-regular { font-family: $font-etc-regular !important; }
.type-etc-medium  { font-family: $font-etc-medium  !important; }
.type-etc-bold    { font-family: $font-etc-bold    !important; }
.type-etc-wide    { font-family: $font-etc-wide    !important; }

.text-black            { color: $colour-black; }
.text-deep-blue        { color: $colour-deep-blue; }
.text-interactive-blue { color: $colour-interactive-blue; }
.text-muted-blue       { color: $colour-muted-blue; }
.text-grey             { color: $colour-grey; }
.text-mint             { color: $colour-mint; }
.text-pink             { color: $colour-pink; }
.text-smoke            { color: $colour-smoke; }
.text-white            { color: $colour-white; }

// Borders
.brd-all {
  border: solid 1px $colour-black;
  border-color: inherit;
}

// Border directions
.brd-top    { border-top:    solid 1px $colour-black; }
.brd-bottom { border-bottom: solid 1px $colour-black; }

.brd-nw {
  border-left: solid 1px $colour-black;
  border-top: solid 1px $colour-black;
}

.brd-se {
  border-bottom: solid 1px $colour-black;
  border-right: solid 1px $colour-black;
}

// Adding borders between (and around) columns in Bootstrap grids
// Partially breaks Bootstrap's patterns
.row-stave {
  margin-left: 0;
  margin-right: 0;

  & > [class*='col']:first-child, & > [class^='col']:first-child {
    border-left: solid 1px $colour-black;
  }

  & > [class*='col'], & > [class^='col'] {
    border-right: solid 1px $colour-black;
  }
}

// Border colours
.brd-black            { border-color: $colour-black; }
.brd-deep-blue        { border-color: $colour-deep-blue;}
.brd-interactive-blue { border-color: $colour-interactive-blue;}
.brd-mint             { border-color: $colour-mint;}
.brd-pink             { border-color: $colour-pink;}
.brd-white            { border-color: $colour-white;}

.round { border-radius: 50%; }

.semi-small   { font-size: $font-size-nav; }
small, .small { font-size: $font-size-small; }

// Text adjustment
.text-left      { text-align: left; }
.text-center    { text-align: center; }
.text-right     { text-align: right; }
.text-uppercase { text-transform: uppercase; }
.text-reset     { text-transform: unset !important; }
.text-nowrap    { white-space: nowrap; }
.text-forcewrap { overflow-wrap: break-word; }

@include media-breakpoint-down(sm) {
  .text-center-sm { text-align: center; }
}

// Padding within elements
.pad-vert-tiny {
  padding-bottom: $gutter-tiny;
  padding-top:    $gutter-tiny;
}

.pad-vert-base {
  padding-bottom: $gutter-base;
  padding-top:    $gutter-base;
}

.pad-vert-large {
  padding-bottom: $gutter-large;
  padding-top:    $gutter-large;
}

.pad-vert-xlarge {
  padding-bottom: $gutter-xlarge;
  padding-top:    $gutter-xlarge;
}

.pad-b-xlarge {
  padding-bottom: $gutter-xlarge;
}

.pad-t-xlarge {
  padding-top:    $gutter-xlarge;
}

.pad-t-base {
  padding-top:    $gutter-base;
}

.pad-horz-large {
  padding-left:  $gutter-large;
  padding-right: $gutter-large;
}

@include media-breakpoint-down(sm) {
  .pad-vert-large, .pad-vert-xlarge {
    padding-bottom: $gutter-base;
    padding-top:    $gutter-base;
  }

  .pad-b-xlarge {
    padding-bottom: $gutter-base;
  }

  .pad-t-xlarge {
    padding-top:    $gutter-base;
  }

  .pad-horz-large {
    padding-left:  $gutter-base;
    padding-right: $gutter-base;
  }
}

// Margins after elements
.gutter-xxlarge { margin-bottom: $gutter-xxlarge; }
.gutter-xlarge  { margin-bottom: $gutter-xlarge; }
.gutter-large   { margin-bottom: $gutter-large; }
.gutter-medium  { margin-bottom: $gutter-medium; }
.gutter-base    { margin-bottom: $gutter-base; }

.flush { margin-bottom: 0 !important; }
.suck {  margin: 0 !important; }

@include media-breakpoint-down(sm) {
  .gutter-xxlarge, .gutter-xlarge, .gutter-large, .gutter-medium { margin-bottom: $gutter-base; }
}
.overflow-hidden { overflow: hidden; }
.img-fluid { max-width: 100%; }
.w-100 { width: 100% !important; }
// Sometimes you need to punch an element to the front
.punch {
  position: relative;
  z-index: 1;
}
// ... and sometimes you just need to ensure all elements have a relative point.
.pos-rel { position: relative; }

.sr-only, .js.js [data-js="hidden"] {
  appearance: none;
  border: 0;
  clip: rect(0,0,0,0);
  height: 1px;
  margin: -1px;
  min-width: 0;
  overflow: hidden;
  padding: 0;
  white-space: nowrap;
  width: 1px;

}

// Used in conjunction with the above class to allow
// *some* elements to display, when they fall into focus
.kb-focus.kb-focus:focus {
  border: unset;
  height: auto;
  margin: unset;
  min-width: unset;
  overflow: visible;
  padding: unset;
  position: static;
  width: auto;
}

// To hide stuff from the accessibility DOM too
.hidden { display: none; }

.cta-box {
  height: 100%;
  padding: $gutter-medium;
  @include media-breakpoint-down(sm) {
    padding: $gutter-tiny;
  }

  & > :last-child { margin-bottom: 0; }

  svg {
    height: auto;
    min-width: 100%;
    vertical-align: top;
  }
}

// Hack
.cta-box.dialog { height: auto; }

// Say you have a set of icons or buttons and you want to make a quick-and-dirty navbar
.space-between {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

// Say you have a CTA inside a Bootstrap column and you need it to have a vertical flexbox
// layout, so you can push the button to the bottom (using a .mt-auto class, for example)
// Works on elements which already have the whole height of the row, naturally.
.flex-vert {
  display: flex;
  flex-direction: column;
  // Risky...
  height: 100%;

  // The height property above causes issues when .flex-vert was added directly onto a Bootstrap
  // column.
  &[class^='col'],
  &[class*=' col'],
  &.block-scroll__child {
    height: auto;
  }
}

// Sometimes, links need to wrap around whole swaths of stuff.
// This is designed to be added to elements such as rows and
// columns which already have a display property, such as flext.
.block-link {
  color: inherit;
  text-decoration: none;
}

// Used to give the SVG logos a wee dunt, inside tabs
.skewchild  > * { transform: rotate(10deg); }
.dunt-right > * { transform: rotate(5deg);  }
.dunt-left  > * { transform: rotate(-5deg); }
// Panels wobble when scrolled (as long as a attribute is added)
.dunt-left  > *, .dunt-right > * { transition: transform 1s; }
.scrolling .dunt-right > * { transform: rotate(-2deg); }
.scrolling .dunt-left  > * { transform: rotate(2deg);  }

// Used in the main navigation
.toggle-container label { cursor: pointer; }